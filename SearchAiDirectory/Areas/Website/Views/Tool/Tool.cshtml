@model ToolPageModel
@{
    Layout = "_Layout";
    ViewData["Title"] = Model.Tool.Name ?? "Tool";
    ViewData["Meta-Description"] = Model.Tool.MetaDescription ?? string.Empty;
    ViewData["Meta-Keywords"] = Model.Tool.MetaKeywords ?? string.Empty;

    string GetInitialsAvatar(string name)
    {
        if (string.IsNullOrEmpty(name)) return "/img/default-avatar.png";

        var initial = char.ToUpper(name[0]);
        var colors = new[] { "#F59E0B", "#10B981", "#3B82F6", "#8B5CF6", "#EC4899" };
        var colorIndex = Math.Abs(name.GetHashCode()) % colors.Length;
        var bgColor = colors[colorIndex];

        return $"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 40 40'><circle cx='20' cy='20' r='20' fill='{bgColor}'/><text x='20' y='20' text-anchor='middle' dy='.35em' fill='white' font-family='Arial' font-size='20' font-weight='bold'>{initial}</text></svg>";
    }
}

<div class="max-w-8xl mx-auto">
    <!-- Tool Header Section -->
    <div class="bg-white rounded-lg shadow-sm p-4 md:p-6 lg:p-8">
        <div class="flex flex-col md:flex-row items-start gap-4 md:gap-6 lg:gap-8">
            <!-- Tool Image -->
            <div class="w-full md:w-1/3">
                <div class="relative aspect-video md:aspect-square overflow-hidden rounded-lg shadow-sm">
                    <img src="@(Model.Tool.ImageUrl ?? " /img/placeholder.png")" alt="@(Model.Tool.Name ?? " Tool")"
                         class="w-full h-full object-cover transform hover:scale-105 transition-transform duration-300"
                         onerror="this.src='/img/placeholder.png'" />
                </div>
            </div>

            <!-- Tool Info -->
            <div class="w-full md:w-2/3 space-y-4 md:space-y-6">
                <div class="space-y-2">
                    <h1 class="text-2xl md:text-3xl font-bold text-gray-900">@Model.Tool.Name</h1>
                    <div class="flex items-center gap-2 flex-wrap">
                        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-100 text-yellow-800">
                            @(Model.Tool.Category.Name ?? "Category")
                        </span>
                        <span class="inline-flex items-center gap-1 text-gray-500 text-sm">
                            <span id="likeCount">@Model.Tool.LikeCount</span>
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20"
                                 fill="currentColor">
                                <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                            </svg>
                        </span>
                    </div>
                </div>

                <div class="flex flex-col sm:flex-row gap-3">
                    <a href="@Model.Tool.Website" target="_blank" rel="noopener noreferrer" class="inline-flex items-center justify-center px-4 py-2 bg-yellow-500 hover:bg-yellow-600
                              text-white rounded-lg transition-all duration-300 text-sm md:text-base gap-2
                              hover:shadow-md group">
                        Visit Website
                        <svg xmlns="http://www.w3.org/2000/svg"
                             class="h-4 w-4 transform group-hover:translate-x-1 transition-transform duration-200"
                             viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd"
                                  d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z"
                                  clip-rule="evenodd" />
                        </svg>
                    </a>
                    @if (User.Identity.IsAuthenticated)
                    {
                        <button id="likeButton" onclick="handleToolLike('@Model.Tool.ID')" data-tool-id="@Model.Tool.ID"
                                data-liked="@Model.IsLikedByCurrentUser.ToString().ToLower()"
                                class="inline-flex items-center justify-center px-4 py-2 border-2
                                       rounded-lg transition-all duration-300 text-sm md:text-base gap-2 group
                                       @(Model.IsLikedByCurrentUser ? "border-red-500 text-red-500 hover:bg-red-50" : "border-yellow-500 text-yellow-500 hover:bg-yellow-50")">
                            <svg xmlns="http://www.w3.org/2000/svg"
                                 class="h-4 w-4 transform group-hover:scale-110 transition-transform duration-200"
                                 viewBox="0 0 20 20" fill="currentColor">
                                <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                            </svg>
                            <span id="likeButtonText">@(Model.IsLikedByCurrentUser ? "Unlike" : "Like")</span>
                        </button>
                    }
                    else
                    {
                        <a href="/login" class="inline-flex items-center justify-center px-4 py-2 border-2 border-yellow-500
                                  text-yellow-500 hover:bg-yellow-50 rounded-lg transition-all duration-300
                                  text-sm md:text-base gap-2">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                                <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z" />
                            </svg>
                            Like
                        </a>
                    }
                </div>

                <div class="prose prose-sm md:prose-base text-gray-600">
                    <h2 class="text-lg md:text-xl font-semibold text-gray-900 mb-2">Description</h2>
                    <p class="text-gray-600">@(Model.Tool.Description ?? "No description available.")</p>
                </div>

                @if (!string.IsNullOrEmpty(Model.Tool.PriceModel))
                {
                    <div>
                        <h2 class="text-lg md:text-xl font-semibold text-gray-900 mb-2">Pricing</h2>
                        <p class="text-gray-600">@Model.Tool.PriceModel</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Comments and Likes Section -->
    <div class="bg-white rounded-lg shadow-sm p-4 md:p-6 lg:p-8 mt-4 md:mt-6">
        <h2 class="text-lg md:text-xl font-semibold text-gray-900 mb-4">Comments</h2>

        <!-- Comment Form -->
        <div class="space-y-3">
            @if (User.Identity.IsAuthenticated)
            {
                <textarea id="commentText"
                          class="w-full p-3 border rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-yellow-600 resize-none"
                          rows="3" placeholder="Write a comment..."></textarea>
                <button onclick="handleComment('@Model.Tool.ID')" class="w-full sm:w-auto px-6 py-2 bg-yellow-600 text-white rounded-lg shadow-sm hover:bg-yellow-700
                                transition duration-300 ease-in-out transform hover:-translate-y-0.5">
                    Comment
                </button>
            }
            else
            {
                <div class="text-center p-4 bg-gray-50 rounded-lg">
                    <p class="text-gray-600 mb-3">Please log in to leave a comment</p>
                    <a href="/login"
                       class="inline-flex items-center justify-center px-6 py-2 bg-yellow-600 text-white rounded-lg
                              hover:bg-yellow-700 transition duration-300 ease-in-out transform hover:-translate-y-0.5">
                        Log In to Comment
                    </a>
                </div>
            }
        </div>

        <!-- Comments List -->
        <div class="mt-8">
            <h3 class="text-md md:text-lg font-semibold text-gray-900 mb-4">User Comments</h3>
            <div class="space-y-4">
                @if (Model.Tool.Comments.Count > 0)
                {
                    foreach (var comment in Model.Tool.Comments)
                    {
                        <div class="p-4 border rounded-lg shadow-sm bg-gray-50">
                            <div class="flex items-start gap-3">
                                <img src="@(string.IsNullOrEmpty(comment.User.Avatar) ? GetInitialsAvatar(comment.User.Name) : comment.User.Avatar)"
                                     alt="@comment.User.Name"
                                     class="w-8 h-8 md:w-10 md:h-10 rounded-full flex-shrink-0"
                                     onerror="this.src='/img/default-avatar.png'" />
                                <div class="flex-1 min-w-0">
                                    <p class="text-gray-600 text-sm md:text-base mb-2">@comment.Content</p>
                                    <div class="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-2 text-xs md:text-sm">
                                        <span class="text-gray-700">
                                            Posted by <span class="font-medium text-yellow-900">@comment.User.Name</span>
                                            <span class="mx-1">•</span>
                                            <time datetime="@comment.CreatedOn.ToString("yyyy-MM-ddTHH:mm:ssZ")">
                                                @comment.CreatedOn.ToShortDateString() @comment.CreatedOn.ToShortTimeString()
                                            </time>
                                        </span>
                                        <button class="inline-flex items-center text-yellow-600 hover:text-yellow-800 transition duration-200 group">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none"
                                                 viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                      d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5" />
                                            </svg>
                                            Like
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        async function handleToolLike(toolId) {
            const likeButton = document.getElementById('likeButton');
            const likeButtonText = document.getElementById('likeButtonText');
            const countElement = document.getElementById('likeCount');

            // Disable button during the request
            likeButton.disabled = true;

            try {
                const response = await fetch(`/tool/togglelike/${toolId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    if (response.status === 401) {
                        window.location.href = '/login';
                        return;
                    }
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();

                if (data.success) {
                    // Update like count
                    countElement.textContent = data.likeCount;

                    // Update button state
                    const isLiked = data.isLiked;
                    likeButtonText.textContent = isLiked ? 'Unlike' : 'Like';

                    // Update button styling
                    if (isLiked) {
                        likeButton.classList.remove('border-yellow-500', 'text-yellow-500', 'hover:bg-yellow-50');
                        likeButton.classList.add('border-red-500', 'text-red-500', 'hover:bg-red-50');
                    } else {
                        likeButton.classList.remove('border-red-500', 'text-red-500', 'hover:bg-red-50');
                        likeButton.classList.add('border-yellow-500', 'text-yellow-500', 'hover:bg-yellow-50');
                    }

                    // Animate the counter
                    countElement.classList.add('scale-125');
                    setTimeout(() => {
                        countElement.classList.remove('scale-125');
                    }, 200);
                } else {
                    alert(data.message || 'Failed to update like status');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to update like status. Please try again.');
            } finally {
                // Re-enable button
                likeButton.disabled = false;
            }
        }

        async function handleComment(toolId) {
            const commentText = document.getElementById('commentText').value.trim();

            if (!commentText) {
                alert('Please write a comment before submitting.');
                return;
            }

            try {
                const response = await fetch(`/tool/comment/${toolId}?content=${encodeURIComponent(commentText)}`, {
                    method: 'POST'
                });

                if (!response.ok) {
                    if (response.status === 401) {
                        window.location.href = '/login';
                        return;
                    }
                    throw new Error('Network response was not ok');
                }

                const data = await response.json();

                if (data.success) {
                    // Reload the page to show the new comment
                    window.location.reload();
                } else {
                    alert(data.message || 'Failed to post comment');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Failed to post comment. Please try again.');
            }
        }
    </script>
}